name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10']
        cuda-version: ['11.8', '12.1']
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup Mambaforge
      uses: conda-incubator/setup-miniconda@v3
      with:
        channels: conda-forge,nvidia,pytorch,defaults
        miniforge-variant: Mambaforge
        miniforge-version: latest
        activate-environment: bnb-env
        use-mamba: true

    - uses: conda-incubator/setup-miniconda@v3
      with:
        channels: conda-forge,nvidia,pytorch,defaults
        activate-environment: bnb-env
        environment-file: environment-cmake.yml
        use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
        auto-activate-base: true
        python-version: ${{ matrix.python-version }}

    - name: Get Date
      id: get-date
      run: echo "today=$(/bin/date -u '+%Y%m%d')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Cache conda env
      id: cache
      uses: actions/cache@v3
      env:
        # Increase this value to reset cache if environment.yml has not changed
        CACHE_NUMBER: 5
      with:
        path: ~/conda_pkgs_dir
        key:
          ${{ runner.os }}--${{ steps.get-date.outputs.today }}--conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment-cmake.yml') }}

    - name: Cuda toolkit for linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        # to prepare space
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc

        addon=""
        cuda_version=${{ matrix.cuda-version }}
        [ "$cuda_version" = "12.1" ] && cuda_version="12.1.1" && addon="cuda-cudart-static cuda-nvrtc"
        [ "$cuda_version" = "11.8" ] && cuda_version="11.8.0"

        conda install cuda-libraries-dev cuda-nvcc cuda-nvtx cuda-cupti cuda-cudart cuda-cudart-dev cuda-runtime cuda-libraries $addon -c "nvidia/label/cuda-$cuda_version"

        find "${{ env.CONDA }}" -name nvcc
        NVCC=$(find "${{ env.CONDA }}" -name nvcc | head -1)
        dirname $NVCC >> "$GITHUB_PATH"
        dir=$(dirname "$NVCC")
        CUDA_HOME=$(dirname "$dir")
        echo CUDA_HOME="$CUDA_HOME"
        echo NVCC="$NVCC"
        echo CUDA_HOME="$CUDA_HOME" >> "$GITHUB_ENV"
        export CUDA_HOME
        $NVCC --version

    - name: Update environment
      run: mamba env update -n bnb-env -f environment-cmake.yml
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - uses: Jimver/cuda-toolkit@v0.2.11
      # not work for ubuntu-latest
      if: matrix.os == 'windows-latest'
      id: cuda-toolkit
      with:
        cuda: "${{ matrix.cuda-version }}.0"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCOMPUTE_CAPABILITY="60;61;62;70;72;75;80;86;87;89;90"
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Configure NOBLASLT
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCOMPUTE_CAPABILITY="60;61;62;70;72;75;80;86;87;89;90"
        -DNO_CUBLASLT=ON
        -S ${{ github.workspace }}

    - name: Build NOBLASLT
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Configure CPU
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCOMPUTE_CAPABILITY="60;61;62;70;72;75;80;86;87;89;90"
        -DNO_CUBLASLT=ON
        -DBUILD_CUDA=OFF
        -S ${{ github.workspace }}

    - name: Build CPU
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Build dist
      run: python setup.py sdist bdist

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: bitsandbytes-${{ matrix.os }}-${{ matrix.cuda-version }}
        path: |
          ${{ github.workspace }}/dist/
